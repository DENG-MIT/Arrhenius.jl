var documenterSearchIndex = {"docs":
[{"location":"get_started/#Get-Started","page":"Get Started","title":"Get Started","text":"","category":"section"},{"location":"get_started/#Basics","page":"Get Started","title":"Basics","text":"","category":"section"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"We first have to make Arrhenius.jl available in our code (along with other packages you might use):","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"using Arrhenius","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"The next step is to create the solution structure similar to Cantera by providing a YAML file as the input. The complete definition of the solution structure can be found here. ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"gas = CreateSolution(\"../../mechanism/JP10skeletal.yaml\")\n","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Note that you have to provide the appropriate location of the YAML file. Here we have in the ../mechanism folder. You can find the number of species and reactions in the mechanism you provided using: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"\nns = gas.n_species\nnr = gas.n_reactions\n","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"To view the species that your mechanism uses:","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"species_arr = gas.species_names","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"You might also want to access a particular species' data. For instance, N2's index can be accessed using: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"index_N2 = species_index(gas,\"N2\")","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"To get the molecular weights of each gas: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"mol_wt_arr = gas.MW","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Hence the mean molecular weight can be obtained as: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"mean_MW = 1. / dot(Y, 1 ./ gas.MW)\n#get the density using the ideal gas law\nρ_mass = P / R / T * mean_MW","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Note that one has to include using LinearAlgebra in the code to be able to use dot(). One can easily convert between the mass and molar fractions:","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"X = Y2X(gas, Y, mean_MW)\nC = Y2C(gas, Y, ρ_mass)","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Some other commonly used thermodynamic functions are given below: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"#molar specific heats\ncp_mole, cp_mass = get_cp(gas, T, X, mean_MW)\n#molar enthalpies\nh_mole = get_H(gas, T, Y, X)\n#entropy\nS0 = get_S(gas, T, P, X)","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"One of the core functionalities of the Arrhenius.jl is its ability to compute the source term that frequently appears in the governing equations of chemical systems. One can simply compute this using : ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"w_dot = wdot_func(gas.reaction, T, C, S0, h_mole)","category":"page"},{"location":"get_started/#Input-Files","page":"Get Started","title":"Input Files","text":"","category":"section"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Similar to Chemkin and Canetra, all calculations in Arrhenius.jl require an input file to describe the properties of the relevant phase(s) of mixture. We adopt the YAML format maintained in the Cantera community.","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Currently, the package relies on Cantera and ReacTorch for interpreting the reaction mechanism. The kinetic info in the mechanism files are inpreprested and saved into a .npz file with the same name as the .yaml file. If you want to have a try, you don't need to install Cantera and ReacTorch, since there are already some pre-compiled reaction mechanisms under the folder of mechanism. ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Otherwise, you can install Cantera and ReacTorch to compile it using the python script interpreter.py under the folder of mechanism.","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"You can also ask for help in the discussion forum and our developers can compile the model for you.","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"With Cantera and ReacTorch installed, you can use the following python command in your terminal to generate the .npz file.","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"python interpreter.py -i gri30.yaml","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Docstrings for Arrhenius.jl interface members can be accessed through Julia's built-in documentation system or in the list below.","category":"page"},{"location":"api/","page":"API","title":"API","text":":C2X\n:CreateSolution\n:H_mass_func\n:R\n:S_mass_func\n:U_mass_func\n:X2C\n:X2Y\n:Y2C\n:Y2X\n:get_H\n:get_S\n:get_U\n:get_cp\n:get_cv\n:mix_trans\n:one_atm\n:set_states\n:species_index\n:wdot_func","category":"page"},{"location":"api/#Arrhenius.C2X","page":"API","title":"Arrhenius.C2X","text":"get mole fraction (X) from concentration (C)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.CreateSolution","page":"API","title":"Arrhenius.CreateSolution","text":"CreateSolution(mech)\n\nReaction mechanism is interepreted here. Part of the infomation are read in from the yaml file, pary of them are from the pre-processed .npz file from ReacTorch and Cantera test for math enviroment\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.H_mass_func","page":"API","title":"Arrhenius.H_mass_func","text":"get enthaphy (H) per mass\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.R","page":"API","title":"Arrhenius.R","text":"const R = 8314.46261815324 #J/(kmol*K)\n\nGas constant\n\n\n\n\n\n","category":"constant"},{"location":"api/#Arrhenius.S_mass_func","page":"API","title":"Arrhenius.S_mass_func","text":"get entropy (S) per unit mass\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.U_mass_func","page":"API","title":"Arrhenius.U_mass_func","text":"get enthaphy (U) per mass\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.X2C","page":"API","title":"Arrhenius.X2C","text":"get concentration (C) from mole fraction (X)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.X2Y","page":"API","title":"Arrhenius.X2Y","text":"get mass fraction (Y) from mole fraction (X)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.Y2C","page":"API","title":"Arrhenius.Y2C","text":"get concentration (C) from mass fraction (Y)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.Y2X","page":"API","title":"Arrhenius.Y2X","text":"get mole fraction (X) from mass fraction (Y)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.get_H","page":"API","title":"Arrhenius.get_H","text":"get enthaphy (H) per mole\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.get_S","page":"API","title":"Arrhenius.get_S","text":"get entropy (S)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.get_U","page":"API","title":"Arrhenius.get_U","text":"get enthaphy (U) per mole\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.get_cp","page":"API","title":"Arrhenius.get_cp","text":"get specific of heat capacity\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.get_cv","page":"API","title":"Arrhenius.get_cv","text":"get specific of heat capacity\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.mix_trans","page":"API","title":"Arrhenius.mix_trans","text":"mix_trans(gas::A, P, T, X, mean_MW) where {A <: Arrhenius.Solution}\n\nCompute the tranposrt properties of a mixture using mixture average formula\n\nEquations Ref. https://personal.ems.psu.edu/~radovic/ChemKinTheoryPaSR.pdf Equations. 5-50/51/52 for viscosity and thermal conductivity\n\nPure species viscosities [Pa-s]\n\nThermal conductivity. [W/m/K].\n\nEquation 5-46 for diffusion\n\nMixture-averaged diffusion coefficients [m^2/s] relating the mass-averaged diffusive fluxes  (with respect to the mass averaged velocity) to gradients in the species mole fractions.\n\nTest this module in transporttest.jl\n\nSee also implementations in ReacTorch\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.one_atm","page":"API","title":"Arrhenius.one_atm","text":"const one_atm = 101325.0 #pascal\n\nOne atm\n\n\n\n\n\n","category":"constant"},{"location":"api/#Arrhenius.set_states","page":"API","title":"Arrhenius.set_states","text":"\"mainly for testing code, will be removed in the future\" \"please customize such functions following this example\"\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.species_index","page":"API","title":"Arrhenius.species_index","text":"Get species index of a species\n\nExample\n\n    species_index(gas, \"O2\")\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.wdot_func","page":"API","title":"Arrhenius.wdot_func","text":"compute reaction source term dC/dt\n\n\n\n\n\n","category":"function"},{"location":"api/#Thermo-Interface-API","page":"API","title":"Thermo Interface API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Arrhenius]\nPages   = [\"Thermo.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"api/#Arrhenius.H_mass_func-Tuple{Any,Any,Any}","page":"API","title":"Arrhenius.H_mass_func","text":"get enthaphy (H) per mass\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.S_mass_func-Tuple{Any,Any,Any}","page":"API","title":"Arrhenius.S_mass_func","text":"get entropy (S) per unit mass\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.U_mass_func-Tuple{Any,Any,Any}","page":"API","title":"Arrhenius.U_mass_func","text":"get enthaphy (U) per mass\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_a-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_a","text":"cal_a(Solution, T, p, X)\n\ncalculates the molar helmholz free energy (a) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_a_RT-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_a_RT","text":"cal_a_RT(gas, T, p, X)\n\ncalculates the dimensionless mole based helmholz free energy (a) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_a_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_a_mean","text":"cal_a_mean(Solution, T, p, X)\n\ncalculates the mean mole based helmholz free energy (a) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_amass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_amass","text":"cal_amass(Solution, T, p, X)\n\ncalculates the partial mass based helmholz free energy (a) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_amass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_amass_mean","text":"cal_amass_mean(Solution, T, p, X)\n\ncalculates the mean mass based helmholz free energy (a) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cp-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_cp","text":"cal_cp(Solution, T, p, X)\n\ncalculates the molar Heat capacity at constant pressure (cp) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cp_R-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_cp_R","text":"cal_cp_R(gas, T, p, X)\n\ncalculates the dimensionless mole based heat capacity  at constant pressure (cp) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cp_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_cp_mean","text":"cal_cp_mean(Solution, T, p, X)\n\ncalculates the mean mole based Heat capacity at constant pressure (cp) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cpmass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_cpmass","text":"cal_cpmass(Solution, T, p, X)\n\ncalculates the partial mass based Heat capacity at constant pressure (cp) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cpmass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_cpmass_mean","text":"cal_cpmass_mean(Solution, T, p, X)\n\ncalculates the mean mass based Heat capacity at constant pressure (cp) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cv-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_cv","text":"cal_cv(Solution, T, p, X)\n\ncalculates the molar Heat capacity at constant volume (cv) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cv_R-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_cv_R","text":"cal_cv_R(gas, T, p, X)\n\ncalculates the dimensionless mole based heat capacity  at constant volume (cv) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cv_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_cv_mean","text":"cal_cv_mean(Solution, T, p, X)\n\ncalculates the mean mole based Heat capacity at constant volume (cv) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cvmass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_cvmass","text":"cal_cvmass(Solution, T, p, X)\n\ncalculates the partial mass based Heat capacity at constant volume (cv) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cvmass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_cvmass_mean","text":"cal_cvmass_mean(Solution, T, p, X)\n\ncalculates the mean mass based Heat capacity at constant volume (cv) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_g-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_g","text":"cal_g(Solution, T, p, X)\n\ncalculates the molar gibbs free energy (g) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_g_RT-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_g_RT","text":"cal_g_RT(gas, T, p, X)\n\ncalculates the dimensionless mole based free gibbs energy (g) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_g_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_g_mean","text":"cal_g_mean(Solution, T, p, X)\n\ncalculates the mean mole based gibbs free energy (g) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_gmass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_gmass","text":"cal_gmass(Solution, T, p, X)\n\ncalculates the partial mass based gibbs free energy (g) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_gmass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_gmass_mean","text":"cal_gmass_mean(Solution, T, p, X)\n\ncalculates the mean mass based gibbs free energy (g) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_h-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_h","text":"cal_h(Solution, T, p, X)\n\ncalculates the molar enthalpy (h) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_h_RT-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_h_RT","text":"cal_h_RT(gas, T, p, X)\n\ncalculates the dimensionless mole based enthalpy (h) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_h_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_h_mean","text":"cal_h_mean(Solution, T, p, X)\n\ncalculates the mean mole based enthalpy (h) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_hmass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_hmass","text":"cal_hmass(Solution, T, p, X)\n\ncalculates the partial mass based enthalpy (h) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_hmass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_hmass_mean","text":"cal_hmass_mean(Solution, T, p, X)\n\ncalculates the mean mass based enthalpy (h) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_s","text":"cal_s(Solution, T, p, X)\n\ncalculates the molar entropy (s) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s0-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_s0","text":"cal_s0(Solution, T, p, X)\n\ncalculates the molar reference entropy (s0) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s0_R-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_s0_R","text":"cal_s0_R(gas, T, p, X)\n\ncalculates the dimensionless mole based reference state entropy (s0) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s0_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_s0_mean","text":"cal_s0_mean(Solution, T, p, X)\n\ncalculates the mean mole based reference entropy (s0) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s0mass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_s0mass","text":"cal_s0mass(Solution, T, p, X)\n\ncalculates the partial mass based reference entropy (s0) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s0mass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_s0mass_mean","text":"cal_s0mass_mean(Solution, T, p, X)\n\ncalculates the mean mass based reference entropy (s0) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s_R-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_s_R","text":"cal_s_R(gas, T, p, X)\n\ncalculates the dimensionless mole based entropy (s) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_s_mean","text":"cal_s_mean(Solution, T, p, X)\n\ncalculates the mean mole based entropy (s) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_smass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_smass","text":"cal_smass(Solution, T, p, X)\n\ncalculates the partial mass based entropy (s) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_smass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_smass_mean","text":"cal_smass_mean(Solution, T, p, X)\n\ncalculates the mean mass based entropy (s) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_u-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_u","text":"cal_u(Solution, T, p, X)\n\ncalculates the molar internal energy for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_u_RT-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_u_RT","text":"cal_u_RT(gas, T, p, X)\n\ncalculates the dimensionless mole based internal energy (u) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_u_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_u_mean","text":"cal_u_mean(Solution, T, p, X)\n\ncalculates the mean mole based internal energy of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_umass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_umass","text":"cal_umass(Solution, T, p, X)\n\ncalculates the partial mass based internal energy for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_umass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API","title":"Arrhenius.cal_umass_mean","text":"cal_umass_mean(Solution, T, p, X)\n\ncalculates the mean mass based internal energy of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.get_H-NTuple{4,Any}","page":"API","title":"Arrhenius.get_H","text":"get enthaphy (H) per mole\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.get_S-NTuple{4,Any}","page":"API","title":"Arrhenius.get_S","text":"get entropy (S)\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.get_U-Tuple{Any,Any}","page":"API","title":"Arrhenius.get_U","text":"get enthaphy (U) per mole\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.get_cp-NTuple{4,Any}","page":"API","title":"Arrhenius.get_cp","text":"get specific of heat capacity\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.get_cv-Tuple{Any,Any,Any}","page":"API","title":"Arrhenius.get_cv","text":"get specific of heat capacity\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.IdealGasThermo","page":"API","title":"Arrhenius.IdealGasThermo","text":"Struct for the ideal gas thermo.\n\nnasa_low: Array with low temperature nasa coeff. for each species\n\nnasa_high: Array with high temperature nasa coeff. for each species\n\nTrange: Array with temperature ranges for each species\n\nisTcommon: bool which indicates if both polynoms share same T at intersection\n\n\n\n\n\n","category":"type"},{"location":"concepts/#Concepts","page":"Concepts","title":"Concepts","text":"","category":"section"},{"location":"concepts/#Structure-of-Arrhenius.jl","page":"Concepts","title":"Structure of Arrhenius.jl","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: schem.png)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Details of the structure can be found in the publications associated with Arrhenius.jl. Such as","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"Machine Learning Approaches to Learn HyChem Models: demonstrate 1000 times faster than genetic algorithms using commercial software for optimizing complex kinetic models.\nArrhenius.jl: A Differentiable Combustion Simulation Package: overview of Arrhenius.jl and applications in deep mechanism reduction, uncertainty quantification, mechanism tuning and model discovery.\nNeural Differential Equations for Inverse Modeling in Model Combustors","category":"page"},{"location":"concepts/#Roadmap","page":"Concepts","title":"Roadmap","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: roadmap)","category":"page"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"You can particpilate the design of roadmap in the discussions.","category":"page"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/#For-users","page":"Installation","title":"For users","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"pkg> add https://github.com/DENG-MIT/Arrhenius.jl","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Note that ] add Arrhenius might not install the latest version.","category":"page"},{"location":"install/#For-developers","page":"Installation","title":"For developers","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"clone the github repo to local","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"cd Arrhenius.jl","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"] add .","category":"page"},{"location":"#[Arrhenius.jl](https://github.com/DENG-MIT/Arrhenius.jl)","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"","category":"section"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Reacting Flow and Combustion Modeling Software 2.0.","category":"page"},{"location":"#Package-Features","page":"Arrhenius.jl","title":"Package Features","text":"","category":"section"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Arrhenius.jl is designed with following in mind:","category":"page"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Combustion software 2.0\nDifferential programing\nPhysics informed machine learning\nCombustion simulation education.","category":"page"},{"location":"#Outline","page":"Arrhenius.jl","title":"Outline","text":"","category":"section"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Documentation comes in following forms:","category":"page"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"How-to examples\nExplanatory guide\nReference docstrings for the entire interface are avaliable in the API Documentation section.","category":"page"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"For developers, when updating these documents, make sure this is synced with docs/make.jl !!","category":"page"},{"location":"#Baiscs","page":"Arrhenius.jl","title":"Baiscs","text":"","category":"section"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Pages = [\"install.md\", \"get_started.md\", \"concepts.md\"]","category":"page"},{"location":"#Tutorials","page":"Arrhenius.jl","title":"Tutorials","text":"","category":"section"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Pages = [\"tutorial.md\"]","category":"page"},{"location":"#Reference","page":"Arrhenius.jl","title":"Reference","text":"","category":"section"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Pages = [\"faq.md\", \"api.md\"]","category":"page"},{"location":"faq/#FAQ","page":"FAQ","title":"FAQ","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"What's the difference between Arrhenius.jl and Chemkin/Cantera?","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"Arrhenius.jl can be viewed as a differentiable Cantera and Arrhenius.jl aims at exploiting differentiable programming for data-driven combustion modeling.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#Pyrolysis-of-Jet-Fuel","page":"Tutorial","title":"Pyrolysis of Jet Fuel","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let us compute the evolution of the mass fractions of C10H16 species as JP-10 is subjected to isobaric pyrolysis at 1 atm and an initial temperature of 1200K. We first include all our packages: ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Arrhenius\nusing LinearAlgebra\nusing DifferentialEquations\nusing ForwardDiff\nusing DiffEqSensitivity\nusing Plots\nusing DelimitedFiles\nusing Profile","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Then create the gas object: ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"gas = CreateSolution(\"../../mechanism/JP10skeletal.yaml\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Declare the initial conditions as arrays: ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Y0 = zeros(ns)\nY0[species_index(gas, \"C10H16\")] = 0.05\nY0[species_index(gas, \"N2\")] = 0.95\nT0 = 1200.0   #K\nP = one_atm\nu0 = vcat(Y0, T0);","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Create a function to define the ODE problem (for more details on solving differential equations refer to DifferentialEquations.jl. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"@inbounds function dudt!(du, u, p, t)\n    T = u[end]\n    Y = @view(u[1:ns])\n    mean_MW = 1. / dot(Y, 1 ./ gas.MW)\n    ρ_mass = P / R / T * mean_MW\n    X = Y2X(gas, Y, mean_MW)\n    C = Y2C(gas, Y, ρ_mass)\n    cp_mole, cp_mass = get_cp(gas, T, X, mean_MW)\n    h_mole = get_H(gas, T, Y, X)\n    S0 = get_S(gas, T, P, X)\n    wdot = wdot_func(gas.reaction, T, C, S0, h_mole)\n    Ydot = wdot / ρ_mass .* gas.MW\n    Tdot = -dot(h_mole, wdot) / ρ_mass / cp_mass\n    du .= vcat(Ydot, Tdot)\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Solve the ODE problem: ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"tspan = [0.0, 0.07];\nprob = ODEProblem(dudt!, u0, tspan);\nsol = solve(prob, TRBDF2(), reltol=1e-6, abstol=1e-9);","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Great! Let us now compare our solution with cantera by first loading the cantera data: ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"cantera_data = readdlm(\"pyrolysis.dat\")\nct_ts= cantera_data[:, 1]\nct_T = cantera_data[:, 2]\nct_Y = cantera_data[:, 3:end];","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Now plot and compare away: ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"plt = plot(sol.t, sol[species_index(gas, \"C10H16\"), :], lw=2, label=\"Arrhenius.jl\");\nplot!(plt, ct_ts, ct_Y[:, species_index(gas, \"C10H16\")], label=\"Cantera\")\nylabel!(plt, \"Mass Fraction of C10H16\")\nxlabel!(plt, \"Time [s]\")\npltT = plot(sol.t, sol[end, :], lw=2, label=\"Arrhenius.jl\");\nplot!(pltT, ct_ts, ct_T, label=\"Cantera\")\nylabel!(pltT, \"Temperature [K]\")\nxlabel!(pltT, \"Time [s]\")\ntitle!(plt, \"JP10 pyrolysis @1200K/1atm\")\npltsum = plot(plt, pltT, legend=true, framestyle=:box)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You should get a plot something like this: ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: JP10)","category":"page"},{"location":"tutorial/#Adjoint-(Sensitivity)-Analysis","page":"Tutorial","title":"Adjoint (Sensitivity) Analysis","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In the previous example, we can easily perform a sensitivity analysis using Julia's DiffEqSensitivity.jl:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"sensealg = ForwardDiffSensitivity()\nalg = TRBDF2()\nfunction fsol(u0)\n    sol = solve(prob, u0=u0, alg, tspan = (0.0, 7.e-2),\n                reltol=1e-3, abstol=1e-6, sensealg=sensealg)\n    return sol[end, end]\nend\nu0[end] = 1200.0 + rand()\nprintln(\"timing ode solver ...\")\n@time fsol(u0)\n@time fsol(u0)\n@time ForwardDiff.gradient(fsol, u0)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The results are quite promising, with sensitivity computed in less than 2 seconds! ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia>timing ode solver ...\n0.405083 seconds (614.32 k allocations: 45.126 MiB)\n0.036229 seconds (16.72 k allocations: 11.618 MiB)\n1.517267 seconds (183.25 k allocations: 864.085 MiB, 7.46% gc time)","category":"page"},{"location":"tutorial/#Compute-Jacobian-using-Auto-Diff","page":"Tutorial","title":"Compute Jacobian using Auto-Diff","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Julia's automatic differentiation packages like ForwardDiff.jl can be exploited thoroughly using Arrhenius.jl to compute the Jacobian that frequently pops up while integrating stiff systems in chemically reactive flows. We present to you an example using the LiDryer 9-species H2 combustion mechanism. So let's import packages:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Arrhenius\nusing LinearAlgebra\nusing DifferentialEquations\nusing ForwardDiff\nusing DiffEqSensitivity\nusing Plots\nusing DelimitedFiles\nusing Profile","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Next input the YAML:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"gas = CreateSolution(\".../../mechanism/LiDryer.yaml\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We use a 9-species + 24-reaction model:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> ns = gas.n_species\n9\njulia> ns = gas.n_species\n24","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"View the participating species:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> gas.species_names\n9-element Array{String,1}:\n \"H2\"\n \"O2\"\n \"N2\"\n \"H\"\n \"O\"\n \"OH\"\n \"HO2\"\n \"H2O2\"\n \"H2O\"","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's set the initial conditions: ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Y0 = zeros(ns)\nY0[species_index(gas, \"H2\")] = 0.055463\nY0[species_index(gas, \"O2\")] = 0.22008\nY0[species_index(gas, \"N2\")] = 0.724457  #to sum as unity\nT0 = 1100.0   #K\nP = one_atm * 10.0\nu0 = vcat(Y0, T0);","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Create the differential function:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"function dudt(u)\n    T = u[end]\n    Y = @view(u[1:ns])\n    mean_MW = 1. / dot(Y, 1 ./ gas.MW)\n    ρ_mass = P / R / T * mean_MW\n    X = Y2X(gas, Y, mean_MW)\n    C = Y2C(gas, Y, ρ_mass)\n    cp_mole, cp_mass = get_cp(gas, T, X, mean_MW)\n    h_mole = get_H(gas, T, Y, X)\n    S0 = get_S(gas, T, P, X)\n    wdot = wdot_func(gas.reaction, T, C, S0, h_mole)\n    Ydot = wdot / ρ_mass .* gas.MW\n    Tdot = -dot(h_mole, wdot) / ρ_mass / cp_mass\n    du = vcat(Ydot, Tdot)\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Now computing the jacobian w/ref to the initial condition vector is as simple as: ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> @time du0 = ForwardDiff.jacobian(dudt, u0)\n 0.026856 seconds (18.37 k allocations: 1.047 MiB)\n10×10 Array{Float64,2}:\n  -0.00227393    -0.000934232   0.000137514  …   0.000213839  -5.21262e-6\n  -0.0360919     -0.0148282     0.00218263       0.00334244   -8.27348e-5\n   0.0            0.0           0.0              0.0           0.0\n   0.00113697     0.000467116  -6.87571e-5      -0.000106919   2.60631e-6\n   2.09985e-12    2.28459e-12  -1.26987e-13      2.97389e-12   2.53222e-14\n   0.0            0.0           0.0          …   2.74378e-5    0.0\n   0.0372289      0.0152953    -0.00225138      -0.00344774    8.53411e-5\n   0.0            0.0           0.0              0.0           0.0\n   0.0            0.0           0.0             -2.9064e-5     0.0\n -27.3692       -47.4374       16.5061          29.0894       -0.306451","category":"page"},{"location":"tutorial/#Auto-ignition","page":"Tutorial","title":"Auto-ignition","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here we use the GRI30 methane combustion mechanism to compute the ignition delay time of a premixed methane-air mixture @ 980K/15 atm. The implementation is quite similar. Let's say you want to set ICs in-terms of the mole-fractions, one may eventually convert them to mass-fractions as follows:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"X0 = zeros(ns);\nX0[species_index(gas, \"CH4\")] = 1.0 / 2.0\nX0[species_index(gas, \"O2\")] = 1.0\nX0[species_index(gas, \"N2\")] = 3.76\nX0 = X0 ./ sum(X0);\nY0 = X2Y(gas, X0, dot(X0, gas.MW));","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The integrator function remains the same: ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"u0 = vcat(Y0, T0)\n@inbounds function dudt!(du, u, p, t)\n    T = u[end]\n    Y = @view(u[1:ns])\n    mean_MW = 1.0 / dot(Y, 1 ./ gas.MW)\n    ρ_mass = P / R / T * mean_MW\n    X = Y2X(gas, Y, mean_MW)\n    C = Y2C(gas, Y, ρ_mass)\n    cp_mole, cp_mass = get_cp(gas, T, X, mean_MW)\n    h_mole = get_H(gas, T, Y, X)\n    S0 = get_S(gas, T, P, X)\n    wdot = wdot_func(gas.reaction, T, C, S0, h_mole)\n    Ydot = wdot / ρ_mass .* gas.MW\n    Tdot = -dot(h_mole, wdot) / ρ_mass / cp_mass\n    du .= vcat(Ydot, Tdot)\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We then integrate using DifferentialEquations.jl","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"tspan = [0.0, 0.1];\nprob = ODEProblem(dudt!, u0, tspan);\n@time sol = solve(prob, CVODE_BDF(), reltol = 1e-6, abstol = 1e-9)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"After running ignition.jl you should get a plot as follows: \n (Image: plot)","category":"page"},{"location":"tutorial/#Global-Sensitivity-Analysis-of-Ignition-Delay","page":"Tutorial","title":"Global Sensitivity Analysis of Ignition Delay","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Coming soon.","category":"page"},{"location":"tutorial/#Global-Sensitivity-Analysis-of-Flame-Speed","page":"Tutorial","title":"Global Sensitivity Analysis of Flame Speed","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Coming soon.","category":"page"},{"location":"tutorial/#Perfect-Stirred-Reactor","page":"Tutorial","title":"Perfect Stirred Reactor","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"One may refer to the NN-PSR repo","category":"page"},{"location":"tutorial/#Computational-Diagnostic","page":"Tutorial","title":"Computational Diagnostic","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Coming soon.","category":"page"},{"location":"tutorial/#CEMA","page":"Tutorial","title":"CEMA","text":"","category":"section"},{"location":"tutorial/#CSP","page":"Tutorial","title":"CSP","text":"","category":"section"}]
}
