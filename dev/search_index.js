var documenterSearchIndex = {"docs":
[{"location":"get_started/#Get-Started","page":"Get Started","title":"Get Started","text":"","category":"section"},{"location":"get_started/#Basics-and-Magic-functions!","page":"Get Started","title":"Basics and Magic functions!","text":"","category":"section"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"We first have to make Arrhenius.jl available in our code (along with other packages you might use):","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"using Arrhenius","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"The next step is to create the solution structure similar to Cantera by providing a YAML file as the input. The complete definition of the solution structure can be found here. ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"gas = CreateSolution(\"../../mechanism/JP10skeletal.yaml\")\n","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Note that you have to provide the appropriate location of the YAML file. Here we have in the ../mechanism folder. You can find the number of species and reactions in the mechanism you provided using: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"\nns = gas.n_species\nnr = gas.n_reactions\n","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"To view the species that your mechanism uses:","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"species_arr = gas.species_names","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"You might also want to access a particular species' data. For instance, N2's index can be accessed using: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"index_N2 = species_index(gas,\"N2\")","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"To get the molecular weights of each gas: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"mol_wt_arr = gas.MW","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Hence the mean molecular weight can be obtained as: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"mean_MW = 1. / dot(Y, 1 ./ gas.MW)\n#get the density using the ideal gas law\nρ_mass = P / R / T * mean_MW","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Note that one has to include using LinearAlgebra in the code to be able to use dot(). One can easily convert between the mass and molar fractions:","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"X = Y2X(gas, Y, mean_MW)\nC = Y2C(gas, Y, ρ_mass)","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Some other commonly used thermodynamic functions are given below: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"#molar specific heats\ncp_mole, cp_mass = get_cp(gas, T, X, mean_MW)\n#molar enthalpies\nh_mole = get_H(gas, T, Y, X)\n#entropy\nS0 = get_S(gas, T, P, X)","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"One of the core functionalities of the Arrhenius.jl is its ability to compute the source term that frequently appears in the governing equations of chemical systems. One can simply compute this using : ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"w_dot = wdot_func(gas.reaction, T, C, S0, h_mole)","category":"page"},{"location":"get_started/#Examples","page":"Get Started","title":"Examples","text":"","category":"section"},{"location":"get_started/#JP10-Pyrolysis","page":"Get Started","title":"JP10 Pyrolysis","text":"","category":"section"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Let us compute the evolution of the mass fractions of C10H16 species as JP-10 is subjected to isobaric pyrolysis at 1 atm and an initial temperature of 1200K. We first include all our packages: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"using Arrhenius\nusing LinearAlgebra\nusing DifferentialEquations\nusing ForwardDiff\nusing DiffEqSensitivity\nusing Plots\nusing DelimitedFiles\nusing Profile","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Then create the gas object: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"gas = CreateSolution(\"../../mechanism/JP10skeletal.yaml\")","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Declare the initial conditions as arrays: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Y0 = zeros(ns)\nY0[species_index(gas, \"C10H16\")] = 0.05\nY0[species_index(gas, \"N2\")] = 0.95\nT0 = 1200.0   #K\nP = one_atm\nu0 = vcat(Y0, T0);","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Create a function to define the ODE problem (for more details on solving differential equations refer to DifferentialEquations.jl. ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"@inbounds function dudt!(du, u, p, t)\n    T = u[end]\n    Y = @view(u[1:ns])\n    mean_MW = 1. / dot(Y, 1 ./ gas.MW)\n    ρ_mass = P / R / T * mean_MW\n    X = Y2X(gas, Y, mean_MW)\n    C = Y2C(gas, Y, ρ_mass)\n    cp_mole, cp_mass = get_cp(gas, T, X, mean_MW)\n    h_mole = get_H(gas, T, Y, X)\n    S0 = get_S(gas, T, P, X)\n    wdot = wdot_func(gas.reaction, T, C, S0, h_mole)\n    Ydot = wdot / ρ_mass .* gas.MW\n    Tdot = -dot(h_mole, wdot) / ρ_mass / cp_mass\n    du .= vcat(Ydot, Tdot)\nend","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Solve the ODE problem: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"tspan = [0.0, 0.07];\nprob = ODEProblem(dudt!, u0, tspan);\nsol = solve(prob, TRBDF2(), reltol=1e-6, abstol=1e-9);","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Great! Let us now compare our solution with cantera by first loading the cantera data: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"cantera_data = readdlm(\"pyrolysis.dat\")\nct_ts= cantera_data[:, 1]\nct_T = cantera_data[:, 2]\nct_Y = cantera_data[:, 3:end];","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"Now plot and compare away: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"plt = plot(sol.t, sol[species_index(gas, \"C10H16\"), :], lw=2, label=\"Arrhenius.jl\");\nplot!(plt, ct_ts, ct_Y[:, species_index(gas, \"C10H16\")], label=\"Cantera\")\nylabel!(plt, \"Mass Fraction of C10H16\")\nxlabel!(plt, \"Time [s]\")\npltT = plot(sol.t, sol[end, :], lw=2, label=\"Arrhenius.jl\");\nplot!(pltT, ct_ts, ct_T, label=\"Cantera\")\nylabel!(pltT, \"Temperature [K]\")\nxlabel!(pltT, \"Time [s]\")\ntitle!(plt, \"JP10 pyrolysis @1200K/1atm\")\npltsum = plot(plt, pltT, legend=true, framestyle=:box)","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"You should get a plot something like this: ","category":"page"},{"location":"get_started/","page":"Get Started","title":"Get Started","text":"(Image: JP10)","category":"page"},{"location":"get_started/#Computing-ignition-delay-time","page":"Get Started","title":"Computing ignition delay time","text":"","category":"section"},{"location":"get_started/#Sensitivity-analysis-of-ignition-delay-times-Active-subspaces","page":"Get Started","title":"Sensitivity analysis of ignition delay times-Active subspaces","text":"","category":"section"},{"location":"get_started/#Perfect-Stirred-reactor","page":"Get Started","title":"Perfect Stirred reactor","text":"","category":"section"},{"location":"get_started/#Computing-Jacobians","page":"Get Started","title":"Computing Jacobians","text":"","category":"section"},{"location":"get_started/#Auto-ignition","page":"Get Started","title":"Auto-ignition","text":"","category":"section"},{"location":"get_started/#Exploiting-Auto-differentiation","page":"Get Started","title":"Exploiting Auto-differentiation","text":"","category":"section"},{"location":"api/#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Docstrings for Arrhenius.jl interface members can be accessed through Julia's built-in documentation system or in the list below.","category":"page"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"You can use name(Arrhenius) to print a full list of exported namespace by Arrhenius.jl, and then copy the list below.","category":"page"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":":C2X\n:CreateSolution\n:H_mass_func\n:R\n:S_mass_func\n:U_mass_func\n:X2C\n:X2Y\n:Y2C\n:Y2X\n:get_H\n:get_S\n:get_U\n:get_cp\n:get_cv\n:mix_trans\n:one_atm\n:set_states\n:species_index\n:wdot_func","category":"page"},{"location":"api/#Arrhenius.C2X","page":"API Documentation","title":"Arrhenius.C2X","text":"get mole fraction (X) from concentration (C)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.CreateSolution","page":"API Documentation","title":"Arrhenius.CreateSolution","text":"CreateSolution(mech)\n\nReaction mechanism is interepreted here. Part of the infomation are read in from the yaml file, pary of them are from the pre-processed .npz file from ReacTorch and Cantera test for math enviroment\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.H_mass_func","page":"API Documentation","title":"Arrhenius.H_mass_func","text":"get enthaphy (H) per mass\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.R","page":"API Documentation","title":"Arrhenius.R","text":"const R = 8314.46261815324 #J/(kmol*K)\n\nGas constant\n\n\n\n\n\n","category":"constant"},{"location":"api/#Arrhenius.S_mass_func","page":"API Documentation","title":"Arrhenius.S_mass_func","text":"get entropy (S) per unit mass\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.U_mass_func","page":"API Documentation","title":"Arrhenius.U_mass_func","text":"get enthaphy (U) per mass\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.X2C","page":"API Documentation","title":"Arrhenius.X2C","text":"get concentration (C) from mole fraction (X)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.X2Y","page":"API Documentation","title":"Arrhenius.X2Y","text":"get mass fraction (Y) from mole fraction (X)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.Y2C","page":"API Documentation","title":"Arrhenius.Y2C","text":"get concentration (C) from mass fraction (Y)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.Y2X","page":"API Documentation","title":"Arrhenius.Y2X","text":"get mole fraction (X) from mass fraction (Y)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.get_H","page":"API Documentation","title":"Arrhenius.get_H","text":"get enthaphy (H) per mole\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.get_S","page":"API Documentation","title":"Arrhenius.get_S","text":"get entropy (S)\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.get_U","page":"API Documentation","title":"Arrhenius.get_U","text":"get enthaphy (U) per mole\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.get_cp","page":"API Documentation","title":"Arrhenius.get_cp","text":"get specific of heat capacity\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.get_cv","page":"API Documentation","title":"Arrhenius.get_cv","text":"get specific of heat capacity\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.mix_trans","page":"API Documentation","title":"Arrhenius.mix_trans","text":"mix_trans(gas::A, P, T, X, mean_MW) where {A <: Arrhenius.Solution}\n\nCompute the tranposrt properties of a mixture using mixture average formula\n\nEquations Ref. https://personal.ems.psu.edu/~radovic/ChemKinTheoryPaSR.pdf Equations. 5-50/51/52 for viscosity and thermal conductivity\n\nPure species viscosities [Pa-s]\n\nThermal conductivity. [W/m/K].\n\nEquation 5-46 for diffusion\n\nMixture-averaged diffusion coefficients [m^2/s] relating the mass-averaged diffusive fluxes  (with respect to the mass averaged velocity) to gradients in the species mole fractions.\n\nTest this module in transporttest.jl\n\nSee also implementations in ReacTorch\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.one_atm","page":"API Documentation","title":"Arrhenius.one_atm","text":"const one_atm = 101325.0 #pascal\n\nOne atm\n\n\n\n\n\n","category":"constant"},{"location":"api/#Arrhenius.set_states","page":"API Documentation","title":"Arrhenius.set_states","text":"\"mainly for testing code, will be removed in the future\" \"please customize such functions following this example\"\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.species_index","page":"API Documentation","title":"Arrhenius.species_index","text":"Get species index of a species\n\nExample\n\n    species_index(gas, \"O2\")\n\n\n\n\n\n","category":"function"},{"location":"api/#Arrhenius.wdot_func","page":"API Documentation","title":"Arrhenius.wdot_func","text":"compute reaction source term dC/dt\n\n\n\n\n\n","category":"function"},{"location":"api/#Thermo-Interface-API-Documentation","page":"API Documentation","title":"Thermo Interface API Documentation","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Modules = [Arrhenius]\nPages   = [\"Thermo.jl\"]\nOrder   = [:function, :type]","category":"page"},{"location":"api/#Arrhenius.H_mass_func-Tuple{Any,Any,Any}","page":"API Documentation","title":"Arrhenius.H_mass_func","text":"get enthaphy (H) per mass\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.S_mass_func-Tuple{Any,Any,Any}","page":"API Documentation","title":"Arrhenius.S_mass_func","text":"get entropy (S) per unit mass\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.U_mass_func-Tuple{Any,Any,Any}","page":"API Documentation","title":"Arrhenius.U_mass_func","text":"get enthaphy (U) per mass\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_a-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_a","text":"cal_a(Solution, T, p, X)\n\ncalculates the molar helmholz free energy (a) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_a_RT-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_a_RT","text":"cal_a_RT(gas, T, p, X)\n\ncalculates the dimensionless mole based helmholz free energy (a) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_a_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_a_mean","text":"cal_a_mean(Solution, T, p, X)\n\ncalculates the mean mole based helmholz free energy (a) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_amass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_amass","text":"cal_amass(Solution, T, p, X)\n\ncalculates the partial mass based helmholz free energy (a) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_amass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_amass_mean","text":"cal_amass_mean(Solution, T, p, X)\n\ncalculates the mean mass based helmholz free energy (a) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cp-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_cp","text":"cal_cp(Solution, T, p, X)\n\ncalculates the molar Heat capacity at constant pressure (cp) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cp_R-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_cp_R","text":"cal_cp_R(gas, T, p, X)\n\ncalculates the dimensionless mole based heat capacity  at constant pressure (cp) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cp_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_cp_mean","text":"cal_cp_mean(Solution, T, p, X)\n\ncalculates the mean mole based Heat capacity at constant pressure (cp) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cpmass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_cpmass","text":"cal_cpmass(Solution, T, p, X)\n\ncalculates the partial mass based Heat capacity at constant pressure (cp) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cpmass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_cpmass_mean","text":"cal_cpmass_mean(Solution, T, p, X)\n\ncalculates the mean mass based Heat capacity at constant pressure (cp) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cv-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_cv","text":"cal_cv(Solution, T, p, X)\n\ncalculates the molar Heat capacity at constant volume (cv) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cv_R-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_cv_R","text":"cal_cv_R(gas, T, p, X)\n\ncalculates the dimensionless mole based heat capacity  at constant volume (cv) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cv_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_cv_mean","text":"cal_cv_mean(Solution, T, p, X)\n\ncalculates the mean mole based Heat capacity at constant volume (cv) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cvmass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_cvmass","text":"cal_cvmass(Solution, T, p, X)\n\ncalculates the partial mass based Heat capacity at constant volume (cv) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_cvmass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_cvmass_mean","text":"cal_cvmass_mean(Solution, T, p, X)\n\ncalculates the mean mass based Heat capacity at constant volume (cv) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_g-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_g","text":"cal_g(Solution, T, p, X)\n\ncalculates the molar gibbs free energy (g) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_g_RT-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_g_RT","text":"cal_g_RT(gas, T, p, X)\n\ncalculates the dimensionless mole based free gibbs energy (g) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_g_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_g_mean","text":"cal_g_mean(Solution, T, p, X)\n\ncalculates the mean mole based gibbs free energy (g) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_gmass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_gmass","text":"cal_gmass(Solution, T, p, X)\n\ncalculates the partial mass based gibbs free energy (g) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_gmass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_gmass_mean","text":"cal_gmass_mean(Solution, T, p, X)\n\ncalculates the mean mass based gibbs free energy (g) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_h-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_h","text":"cal_h(Solution, T, p, X)\n\ncalculates the molar enthalpy (h) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_h_RT-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_h_RT","text":"cal_h_RT(gas, T, p, X)\n\ncalculates the dimensionless mole based enthalpy (h) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_h_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_h_mean","text":"cal_h_mean(Solution, T, p, X)\n\ncalculates the mean mole based enthalpy (h) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_hmass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_hmass","text":"cal_hmass(Solution, T, p, X)\n\ncalculates the partial mass based enthalpy (h) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_hmass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_hmass_mean","text":"cal_hmass_mean(Solution, T, p, X)\n\ncalculates the mean mass based enthalpy (h) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_s","text":"cal_s(Solution, T, p, X)\n\ncalculates the molar entropy (s) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s0-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_s0","text":"cal_s0(Solution, T, p, X)\n\ncalculates the molar reference entropy (s0) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s0_R-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_s0_R","text":"cal_s0_R(gas, T, p, X)\n\ncalculates the dimensionless mole based reference state entropy (s0) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s0_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_s0_mean","text":"cal_s0_mean(Solution, T, p, X)\n\ncalculates the mean mole based reference entropy (s0) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s0mass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_s0mass","text":"cal_s0mass(Solution, T, p, X)\n\ncalculates the partial mass based reference entropy (s0) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s0mass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_s0mass_mean","text":"cal_s0mass_mean(Solution, T, p, X)\n\ncalculates the mean mass based reference entropy (s0) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s_R-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_s_R","text":"cal_s_R(gas, T, p, X)\n\ncalculates the dimensionless mole based entropy (s) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_s_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_s_mean","text":"cal_s_mean(Solution, T, p, X)\n\ncalculates the mean mole based entropy (s) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_smass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_smass","text":"cal_smass(Solution, T, p, X)\n\ncalculates the partial mass based entropy (s) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_smass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_smass_mean","text":"cal_smass_mean(Solution, T, p, X)\n\ncalculates the mean mass based entropy (s) of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_u-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_u","text":"cal_u(Solution, T, p, X)\n\ncalculates the molar internal energy for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_u_RT-Tuple{Arrhenius.Solution,Arrhenius.IdealGasThermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_u_RT","text":"cal_u_RT(gas, T, p, X)\n\ncalculates the dimensionless mole based internal energy (u) for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_u_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_u_mean","text":"cal_u_mean(Solution, T, p, X)\n\ncalculates the mean mole based internal energy of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_umass-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_umass","text":"cal_umass(Solution, T, p, X)\n\ncalculates the partial mass based internal energy for each species\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.cal_umass_mean-Tuple{Arrhenius.Solution,Arrhenius.Thermo,Real,Real,AbstractArray}","page":"API Documentation","title":"Arrhenius.cal_umass_mean","text":"cal_umass_mean(Solution, T, p, X)\n\ncalculates the mean mass based internal energy of the mixture\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.get_H-NTuple{4,Any}","page":"API Documentation","title":"Arrhenius.get_H","text":"get enthaphy (H) per mole\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.get_S-NTuple{4,Any}","page":"API Documentation","title":"Arrhenius.get_S","text":"get entropy (S)\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.get_U-Tuple{Any,Any}","page":"API Documentation","title":"Arrhenius.get_U","text":"get enthaphy (U) per mole\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.get_cp-NTuple{4,Any}","page":"API Documentation","title":"Arrhenius.get_cp","text":"get specific of heat capacity\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.get_cv-Tuple{Any,Any,Any}","page":"API Documentation","title":"Arrhenius.get_cv","text":"get specific of heat capacity\n\n\n\n\n\n","category":"method"},{"location":"api/#Arrhenius.IdealGasThermo","page":"API Documentation","title":"Arrhenius.IdealGasThermo","text":"Struct for the ideal gas thermo.\n\nnasa_low: Array with low temperature nasa coeff. for each species\n\nnasa_high: Array with high temperature nasa coeff. for each species\n\nTrange: Array with temperature ranges for each species\n\nisTcommon: bool which indicates if both polynoms share same T at intersection\n\n\n\n\n\n","category":"type"},{"location":"concepts/#Concepts","page":"Concepts","title":"Concepts","text":"","category":"section"},{"location":"concepts/#Structure-of-Arrhenius.jl","page":"Concepts","title":"Structure of Arrhenius.jl","text":"","category":"section"},{"location":"concepts/","page":"Concepts","title":"Concepts","text":"(Image: schem.png)","category":"page"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"pkg> add https://github.com/DENG-MIT/Arrhenius.jl","category":"page"},{"location":"#[Arrhenius.jl](https://github.com/DENG-MIT/Arrhenius.jl)","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"","category":"section"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Combustion Kinetic Modeling Software 2.0.","category":"page"},{"location":"#Package-Features","page":"Arrhenius.jl","title":"Package Features","text":"","category":"section"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Arrhenius.jl is designed with following in mind:","category":"page"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Combustion software 2.0\nDifferential programing\nPhysics informed machine learning\nCombustion simulation education.","category":"page"},{"location":"#Outline","page":"Arrhenius.jl","title":"Outline","text":"","category":"section"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Documentation comes in following forms:","category":"page"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"How-to examples\nExplanatory guide\nReference docstrings for the entire interface are avaliable in the API Documentation section.","category":"page"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"When updating these documents, make sure this is synced with docs/make.jl !!","category":"page"},{"location":"#Baiscs","page":"Arrhenius.jl","title":"Baiscs","text":"","category":"section"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Pages = [\"install.md\", \"get_started.md\", \"concepts.md\"]","category":"page"},{"location":"#Reference","page":"Arrhenius.jl","title":"Reference","text":"","category":"section"},{"location":"","page":"Arrhenius.jl","title":"Arrhenius.jl","text":"Pages = [\"faq.md\", \"api.md\"]","category":"page"},{"location":"faq/#FAQ","page":"FAQ","title":"FAQ","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"What's the difference between Arrhenius.jl and Chemkin/Cantera?","category":"page"}]
}
